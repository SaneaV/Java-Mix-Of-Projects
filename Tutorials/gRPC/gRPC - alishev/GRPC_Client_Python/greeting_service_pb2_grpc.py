# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import greeting_service_pb2 as greeting__service__pb2


class GreetingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.greetingServiceNonStream = channel.unary_unary(
                '/com.example.grpc.GreetingService/greetingServiceNonStream',
                request_serializer=greeting__service__pb2.HelloRequest.SerializeToString,
                response_deserializer=greeting__service__pb2.HelloResponse.FromString,
                )
        self.greetingServiceServerStream = channel.unary_stream(
                '/com.example.grpc.GreetingService/greetingServiceServerStream',
                request_serializer=greeting__service__pb2.HelloRequest.SerializeToString,
                response_deserializer=greeting__service__pb2.HelloResponse.FromString,
                )
        self.greetingServiceClientStream = channel.stream_unary(
                '/com.example.grpc.GreetingService/greetingServiceClientStream',
                request_serializer=greeting__service__pb2.HelloRequest.SerializeToString,
                response_deserializer=greeting__service__pb2.HelloResponse.FromString,
                )
        self.greetingServiceBidirectionalStream = channel.stream_stream(
                '/com.example.grpc.GreetingService/greetingServiceBidirectionalStream',
                request_serializer=greeting__service__pb2.HelloRequest.SerializeToString,
                response_deserializer=greeting__service__pb2.HelloResponse.FromString,
                )


class GreetingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def greetingServiceNonStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def greetingServiceServerStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def greetingServiceClientStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def greetingServiceBidirectionalStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreetingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'greetingServiceNonStream': grpc.unary_unary_rpc_method_handler(
                    servicer.greetingServiceNonStream,
                    request_deserializer=greeting__service__pb2.HelloRequest.FromString,
                    response_serializer=greeting__service__pb2.HelloResponse.SerializeToString,
            ),
            'greetingServiceServerStream': grpc.unary_stream_rpc_method_handler(
                    servicer.greetingServiceServerStream,
                    request_deserializer=greeting__service__pb2.HelloRequest.FromString,
                    response_serializer=greeting__service__pb2.HelloResponse.SerializeToString,
            ),
            'greetingServiceClientStream': grpc.stream_unary_rpc_method_handler(
                    servicer.greetingServiceClientStream,
                    request_deserializer=greeting__service__pb2.HelloRequest.FromString,
                    response_serializer=greeting__service__pb2.HelloResponse.SerializeToString,
            ),
            'greetingServiceBidirectionalStream': grpc.stream_stream_rpc_method_handler(
                    servicer.greetingServiceBidirectionalStream,
                    request_deserializer=greeting__service__pb2.HelloRequest.FromString,
                    response_serializer=greeting__service__pb2.HelloResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.example.grpc.GreetingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GreetingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def greetingServiceNonStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.grpc.GreetingService/greetingServiceNonStream',
            greeting__service__pb2.HelloRequest.SerializeToString,
            greeting__service__pb2.HelloResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def greetingServiceServerStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.example.grpc.GreetingService/greetingServiceServerStream',
            greeting__service__pb2.HelloRequest.SerializeToString,
            greeting__service__pb2.HelloResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def greetingServiceClientStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/com.example.grpc.GreetingService/greetingServiceClientStream',
            greeting__service__pb2.HelloRequest.SerializeToString,
            greeting__service__pb2.HelloResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def greetingServiceBidirectionalStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.example.grpc.GreetingService/greetingServiceBidirectionalStream',
            greeting__service__pb2.HelloRequest.SerializeToString,
            greeting__service__pb2.HelloResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
